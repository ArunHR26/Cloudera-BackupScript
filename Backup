#!/usr/bin/env bash
## Author - Arun Singh
## Email - arunsingh@outlook.in
#set -x
## change below values ##
EN=`which echo`
OP=`which openssl`
_ENC="${OP} enc -d -a"
CMUSERNAME=`${EN} YWRtaW4K | ${_ENC}`  # change cm_user name in encrypted format
CMPASSWORD=`${EN} YWRtaW4K | ${_ENC}`  # change cm_password in encrypted format
MYSQLPASSWD=`${EN} YWRtaW4K | ${_ENC}` # change mysql root password in encrypted format
__SSHPASS=`${EN} YWRtaW4K | ${_ENC}`   # change common root password for entire cluster in encrypted format
BACKUPHOSTIP="10.xx.xx.xx"            # change backup host ip
SSHUSER="root"                         # do not change
BACKUPDATE=`date '+%d_%m_%y'`
BACKUPPATH="/opt/backup/backup_${BACKUPDATE}"          # change to back dir location
userdir="/home/user" #change to user dir
FDATETIME="${BACKUPDATETIME}"
BACKUPDATETIME=`date '+%d_%m_%y_%H_%M'`
METADATABACKUPFULLPATH="namenodeMetaData_${BACKUPDATETIME}.tar.gz"
HDPCONFIGFILELOCATION="${BACKUPPATH}/configFiles_${BACKUPDATETIME}.tar.gz"
SCM_HOSTNAME=$(cat /etc/cloudera-scm-agent/config.ini | grep server_host | cut -d = -f2)
SCM_IP=$(dig +short ${SCM_HOSTNAME})
EXPORT_FILE="${BACKUPPATH}/cmsetringconfigs.json"
CMCONFIGFILE="${BACKUPPATH}/cmConfig_${BACKUPDATETIME}.json"
TARCONFIGFILE="cmConfig_${BACKUPDATETIME}.json"
XMLCONFIGFILE="xmlhdpcmConfig_${BACKUPDATETIME}"
BackupFilePattern="BackupFile_$(date +%A_%d_%h_%Y_%I_%M_%p)"
KTSBACKUP="KTSBack_${BACKUPDATETIME}.tar.gz"
logsdir="/var/log"
_days="+30"
_rday="+2"
if [[ ! "$SCM_IP" ]]
then
SCM_IP=${SCM_HOSTNAME}
fi
curl -s --head --request  GET http://${SCM_IP}:7180 | grep "200 OK" > /dev/null
if [[ ${?} == "0" ]]
then
SCM_PORT=7180
HTTP="http://"
elif
curl --insecure -s --head --request  GET https://${SCM_IP}:7183 | grep "200 OK" > /dev/null
 [[ ${?} == "0" ]]
then
SCM_PORT=7183
HTTP="https://"
else
SCM_PORT=0
fi

SCM_URL="${HTTP}${SCM_IP}:${SCM_PORT}"
APIVERSION="api/$(curl -k -s -u ${CMUSERNAME}:${CMPASSWORD} -k -X GET "${SCM_URL}/api/version")"
APIFULLPATH="/${APIVERSION}/cm/deployment"
CLUSTERNAME=$(curl -s -k -u ${CMUSERNAME}:${CMPASSWORD}  "${SCM_URL}/${APIVERSION}/clusters" | grep "name" | sed -e 's|"name" :| |g' -e 's|"||g' -e 's|,||g' -e 's/^ *//;s/$//')
_HOSTS=$(curl -s -k -u ${CMUSERNAME}:${CMPASSWORD} "${SCM_URL}/${APIVERSION}/hosts" | grep ipAddress |sed 's/"//g;s/,//g'|cut -d':' -f2)
NAMENODE_ID=$(curl -s -k -u ${CMUSERNAME}:${CMPASSWORD} "${SCM_URL}/${APIVERSION}/cm/deployment" | grep -A2 '"type" : "NAMENODE"' | grep '"hostId"' | head -n1 | sed 's|^ *||;s|$||')
NAMENODEHOST=$(curl -s -k -u ${CMUSERNAME}:${CMPASSWORD} "${SCM_URL}/${APIVERSION}/hosts" | grep -A2 "${NAMENODE_ID}" | tail -n1 | cut -d : -f2 | sed 's|"||;s|"||;s|,||;s/^ *//;s/$//')
NAMENODEIP=$(curl -s -k -u ${CMUSERNAME}:${CMPASSWORD} "${SCM_URL}/${APIVERSION}/hosts" | grep -A1 "${NAMENODE_ID}" | tail -n1 | cut -d : -f2 | sed 's|"||;s|"||;s|,||;s/^ *//;s/$//')
NAMENODEMETADATAPATH=$(curl -s -k -u ${CMUSERNAME}:${CMPASSWORD} "${SCM_URL}/${APIVERSION}/cm/deployment" | grep -A1 dfs_name_dir_list | tail -n1 | cut -d : -f2 | sed -e 's|"||g' -e 's|,||g' -e 's|^ ||;s|$||')
KTS_HOST_ID=$(curl -s -k -u ${CMUSERNAME}:${CMPASSWORD} "${SCM_URL}/${APIVERSION}/cm/deployment" | grep -A2 '"type" : "KEYTRUSTEE_ACTIVE_SERVER"' | tail -n1 | sed 's|^ *||;s|$||')
KTS_IP=$(curl -s -k -u ${CMUSERNAME}:${CMPASSWORD} "${SCM_URL}/${APIVERSION}/hosts" | grep -A1 "${KTS_HOST_ID}" | tail -n1 | cut -d : -f2 | sed 's|"||;s|"||;s|,||;s/^ *//;s/$//')

_check () {
status=$?
if [[ $status != '0' ]]
then
return $status
fi
}

__sshPass() {
for host in ${_HOSTS[@]}; do sed -e '1,/^==SSHPASS/d' $0 | openssl enc -d -a | ${SSHFLAG} ${SSHUSER}@${host} "cat > /opt/sshpass.tar.gz;cd /opt; tar zxf sshpass.tar.gz; rpm -qa | grep -qw sshpass || rpm -ih sshpass-1.06-1.el6.x86_64.rpm; rm -rf /opt/sshpass-1.06-1.el6.x86_64.rpm /opt/sshpass.tar.gz"; done
}
__SSH_CHECK_() {

ssh -q -o "BatchMode=yes"  ${SSHUSER}@${BACKUPHOSTIP} exit
_check
ssh -q -o "BatchMode=yes"  ${SSHUSER}@${SCM_IP} exit
_check
ssh -q -o "BatchMode=yes"  ${SSHUSER}@${HOSTNAME} exit
_check
if [[ ${status} == '0' ]]
then
SSHFLAG="ssh"
else
rpm -qa | grep -qw sshpass || $(sed -e '1,/^==SSHPASS/d' $0 | openssl enc -d -a | tar zxf - && rpm -i sshpass-1.06-1.el6.x86_64.rpm && rm -f sshpass-1.06-1.el6.x86_64.rpm)
SSHFLAG="sshpass -p ${__SSHPASS}  ssh  -o StrictHostKeyChecking=no"
#__sshPass
fi
}
__SSH_CHECK_

__MySQL () {
MYSQLHOST=$(${SSHFLAG} ${SSHUSER}@${SCM_IP} cat /etc/cloudera-scm-server/db.properties | grep com.cloudera.cmf.db.host | cut -d = -f2 | cut -d : -f1)
if [[ ${MYSQLHOST} == 'localhost' ]]
then
MYSQLHOST=${SCM_HOSTNAME}
fi
MYSQLUSERID="root"
MYSQLDBBACKUPPATH="${BACKUPPATH}"
MYSQLHOSTNAME=$(dig +short ${MYSQLHOST})
if [[ ! "$MYSQLHOSTNAME" ]]
then
MYSQLHOSTNAME=${MYSQLHOST}
fi
}

BDIR="function BD {
if [[ ! -d ${BACKUPPATH} ]]
then
mkdir -p "${BACKUPPATH}"
fi
}"
__BDIR__=`${SSHFLAG} ${SSHUSER}@${BACKUPHOSTIP} "${BDIR};BD"`

_check_up () {
if [[ ${SCM_PORT} == '0' ]] && [[ ! ${NAMENODEIP} ]] && [[ ! ${_HOSTS}  ]]
then
error "Cloudera Manager is not up & running or may be running on different port"
return 1
fi
}

BackHadoopMetaData() {
FUNC=${FUNCNAME[0]}
( _check_up )
if [[ ${?} == '0' ]]; then
( ${__BDIR__} )
if [[ ${?} == '0' ]]; then
( ${SSHFLAG} ${SSHUSER}@${NAMENODEIP} tar czf - ${NAMENODEMETADATAPATH} --absolute-names | ${SSHFLAG} ${SSHUSER}@${BACKUPHOSTIP} "cat > ${BACKUPPATH}/${METADATABACKUPFULLPATH}" )
else _check
fi
else _check
fi
}

BackCMConfigs()
{
FUNC=${FUNCNAME[0]}
( _check_up )
if [[ ${?} == '0' ]]; then
( ${__BDIR__} )
if [[ ${?} == '0' ]]; then
( curl -s -k -u ${CMUSERNAME}:${CMPASSWORD} "${SCM_URL}${APIFULLPATH}" > ${TARCONFIGFILE} )
if [[ ${?} == '0' ]]; then
( tar czf - ${TARCONFIGFILE} --remove-files |  ${SSHFLAG} ${SSHUSER}@${BACKUPHOSTIP} "cat > ${BACKUPPATH}/${TARCONFIGFILE}.tar.gz")
else _check
fi
else _check
fi
else _check
fi
}

BackServicesConfigs()
{
SVCLISTPATH=()
FUNC=${FUNCNAME[0]}
( _check_up )
if [[ ${?} == '0' ]]; then
for cluname in ${CLUSTERNAME[@]}; do
SVCLISTPATH+=`curl -s -u ${CMUSERNAME}:${CMPASSWORD} -k -X GET ${SCM_URL}/${APIVERSION}/clusters/${cluname}/services/ | grep "name" | sed -e 's|"name" : ||g' -e 's|"||g' -e 's|,||g' -e 's/^ *//;s/$//'  | grep [a-z].*`;SVCLISTPATH+=" "; done
( ${__BDIR__} )
if [[ ${?} == '0' ]]; then
( for i in ${SVCLISTPATH[@]}
do
curl -s -k -u ${CMUSERNAME}:${CMPASSWORD} -X GET "$SCM_URL/${APIVERSION}/clusters/${CLUSTERNAME[0]:0:11}/services/${i}/clientConfig" -o ${i}.zip;
done )
if [[ ${?} == '0' ]]; then
( tar czf - `pwd`/*zip --absolute-names --remove-files  | ${SSHFLAG} ${SSHUSER}@${BACKUPHOSTIP} "cat > ${BACKUPPATH}/${XMLCONFIGFILE}.tar.gz" )
else _check
fi
else _check
fi
else _check
fi
}

KTSBackup () {
FUNC=${FUNCNAME[0]}
( _check_up )
if [[  -z ${KTS_HOST_ID} ]];then
inf "KTS Server is not configured on this cluster"
else
( sed -e '1,/^==SSHPASS/d' $0 | openssl enc -d -a | ${SSHFLAG} ${SSHUSER}@${KTS_IP} "cat > /opt/sshpass.tar.gz;cd /opt; tar zxf sshpass.tar.gz; rpm -qa | grep -qw sshpass || rpm -ih sshpass-1.06-1.el6.x86_64.rpm; rm -rf /opt/sshpass-1.06-1.el6.x86_64.rpm /opt/sshpass.tar.gz" )
if [[ ${?} == '0' ]];then
( ${SSHFLAG} ${SSHUSER}@${KTS_IP} "tar cpf - /var/lib/keytrustee/db/*  --absolute-names  --no-recursion | ${SSHFLAG} ${SSHUSER}@${BACKUPHOSTIP} 'cat > ${BACKUPPATH}/${KTSBACKUP}'" )
else _check
fi
fi
}

UserBackup () {
FUNC=${FUNCNAME[0]}
( ${__BDIR__} )
if [[ ${?} == '0' ]]; then
( ${SSHFLAG} ${SSHUSER}@${HOSTNAME} "${BDIR};BD" )
if [[ ${?} == '0' ]]; then
for back in ${userdir[@]}; do tar czf - ${back} --absolute-names |  ${SSHFLAG} ${SSHUSER}@${BACKUPHOSTIP} "cat > ${BACKUPPATH}/userdata_$(echo ${back} | rev | cut -d "/" -f1 | rev).tar.gz";done
else _check
fi
else _check
fi
}
Retention()
{
FUNC=${FUNCNAME[0]}
(${SSHFLAG} ${SSHUSER}@${BACKUPHOSTIP} "find /opt/backup/* -type f -mtime ${_rday} -delete;")
(${SSHFLAG} ${SSHUSER}@${BACKUPHOSTIP} "find /opt/backup/* -type d -mtime ${_rday} -delete;")
}
BackMysqlDB()
{
FUNC=${FUNCNAME[0]}
__MySQL
mkdir -p  ${MYSQLDBBACKUPPATH}
( ${__BDIR__} )
if [[ ${?} == '0' ]]; then
( ${SSHFLAG} ${SSHUSER}@${HOSTNAME} "${BDIR};BD" )
if [[ ${?} == '0' ]]; then
( for db in $(mysql -h$MYSQLHOSTNAME -u$MYSQLUSERID -p$MYSQLPASSWD --skip-column-names -e  "show databases"|grep -vwE "nav|information_schema|performance_schema")
do
cd ${MYSQLDBBACKUPPATH} && mysqldump -h$MYSQLHOSTNAME -u$MYSQLUSERID -p$MYSQLPASSWD --add-drop-database --add-drop-table --allow-keywords --flush-privileges --result-file ${MYSQLDBBACKUPPATH}/${db}_${BACKUPDATETIME}.sql  ${db}
tar czf - `pwd`/*sql --absolute-names --remove-files | ${SSHFLAG} ${SSHUSER}@${BACKUPHOSTIP} "cat > ${BACKUPPATH}/${db}_${BACKUPDATETIME}.sql.tar.gz"
done )
else _check
fi
else _check
fi
}
__eMAIL_check () {
_check_mail=`pidof master`
if [[  -z ${_check_mail} ]]
then
error "Postfix is not running"
else
_eMail_Shoot
fi
}
_eMail_Shoot () {
cat ${_tmplog} | mail -s "backupscript log --- `hostname -f`" arunsingh@outlook.in
cat ${_tmplog} >> ${0}.log && rm -rf ${_tmplog}
}

CleanLogs () {
FUNC=${FUNCNAME[0]}
( _check_up )
if [[ ${?} == '0' ]]; then
( for host in ${_HOSTS[@]}; do ${SSHFLAG} ${SSHUSER}@${host} "${BDIR};BD"; ${SSHFLAG} ${SSHUSER}@${host} "find ${logsdir} -type f -mtime ${_days} -regex '.*\(.log\|.out\)$' -delete"; done )
else _check
fi
}

args="$@"
notify() { log  "NOTE: ${@}"; }
error() { log  "ERROR: ${@}"; }
inf() { log "INFO: $1"; }
log() {
         _tmplog=${0}.log.tmp
         datestring=`date +'%Y-%m-%d %H:%M:%S'`
         ${EN} "$datestring ${@}" >> ${_tmplog}
}

_log() {
        if [[ ${?} == '0' ]]
           then
        notify "function ${FUNC} is successfuly excuted"
           else
        error "function ${FUNC} failed with exit code ${?}"
        fi
 }
usage() {
    echo "Usage:"
    echo "${0} [OPTIONS]"
    echo "OPTIONS: {backhadoopmetadata|backcmconfigs|backservicesconfigs|backmysqldb|cleanlogs|retention|userbackup|ktsbackup|all}"
}
for switch in ${@};
do
case "${switch}" in
  backhadoopmetadata) BackHadoopMetaData;_log;__eMAIL_check ;;
  backcmconfigs) BackCMConfigs; _log;__eMAIL_check ;;
  backservicesconfigs) BackServicesConfigs;_log;__eMAIL_check ;;
  backmysqldb) BackMysqlDB ;_log;__eMAIL_check ;;
  cleanlogs)  CleanLogs ;_log;__eMAIL_check ;;
  retention) Retention;_log;__eMAIL_check;;
  userbackup) UserBackup;_log;__eMAIL_check;;
  ktsbackup) KTSBackup;_log;__eMAIL_check;;
  all) BackHadoopMetaData;_log;BackCMConfigs;_log;BackServicesConfigs;_log;BackMysqlDB;_log;CleanLogs;_log;Retention;_log;UserBackup;_log;KTSBackup;_log;__eMAIL_check;;
  *) error "Invalid switch: ${switch}"; usage ;;
esac
done

if [ ! "$args" ]; then
    usage
fi

exit 0
==SSHPASS
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
BqE8JaEtOOmtYnBygtODXh2W5i4jimSzDr0Cw/okDQerRtE9VqgMLCFiXXs0mxxA
29fWdxAcOTeV5pbu3AEU44xdOvc9aRDHTz/tBkzPTlZ1ppVQbRmyBuQ82Bei2eYF
sN1LczYrPUAOewys3e2vfJvLLxJ6Zx6sGk78wzbYAhSPPLQhQvw6ZdyC/JO4WjjY
E8Al5NvP4H7kd4DBQHWQbYvuxwZQHZKcERwlTK4Nkp6xu/wB9dN9pTWGZOUHMsFO
l6fLleW9JiTPe2vEu9jTKnMqS9JHr0ZVyBMmz42DDP85RZ7UDI05JzKYb4yM4ld4
iP1RVWO6EnSwbvsBx3iwtzVtsocn3/cGQFckJiCN/s07VIz0EtcwDdJ6QdL8n3De
bh8G+IFBdq1OtCnOBMLLawdXRTmQo1Ueo/tICLninaBUkYpz2UGfjG/rrfoDr1xQ
RT5f4VLG5WI2XyC+Ogxj4Cn3GpM2e9+mbJ+ypQ4qu0YugktWwDulr4cv0dJCjBSJ
IUveRwYYXM7UPCaHe6iqYyRh9NwdKpNKDwF9JGU34Wu1uS400oq0wfIUF4iJLGT9
ZBCRArr7Lg4fdcAu03Cml9cC4OIwDDUJ6SM23cd7iiJEQrx2AIB+gNXCUVNjSXif
G5+ZLoF569x2r7f0WNk6DTscO5FxCwCR47GTAQmQSB+NbjrcIPrnH7cRdXT/D/5P
+S/+4i/+4i/+4i/+4i/+4i/+4i/+4i/+4i/+4i/+4i/+4i/+4i/+4i/+4i/+4i/+
4i/+4i/+4i/+4i/+Df8PUBDn/QB4AAA=
